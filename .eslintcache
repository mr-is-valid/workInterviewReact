[{"C:\\web project\\my-react-app\\src\\index.js":"1","C:\\web project\\my-react-app\\src\\App.js":"2","C:\\web project\\my-react-app\\src\\reportWebVitals.js":"3","C:\\web project\\my-react-app\\src\\components\\tableData.js":"4","C:\\web project\\my-react-app\\src\\components\\graphData.js":"5","C:\\web project\\my-react-app\\src\\store\\store.js":"6","C:\\web project\\my-react-app\\src\\store\\reducers\\metorReducer.js":"7","C:\\web project\\my-react-app\\src\\store\\reducers\\index.js":"8","C:\\web project\\my-react-app\\src\\store\\actions\\metorAction.js":"9","C:\\web project\\my-react-app\\src\\store\\index.js":"10"},{"size":625,"mtime":1643551602283,"results":"11","hashOfConfig":"12"},{"size":661,"mtime":1643532119520,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"12"},{"size":5479,"mtime":1643729644781,"results":"15","hashOfConfig":"12"},{"size":6451,"mtime":1643633024930,"results":"16","hashOfConfig":"12"},{"size":213,"mtime":1643551540475,"results":"17","hashOfConfig":"12"},{"size":553,"mtime":1643554926293,"results":"18","hashOfConfig":"12"},{"size":182,"mtime":1643552379068,"results":"19","hashOfConfig":"12"},{"size":397,"mtime":1643554808963,"results":"20","hashOfConfig":"12"},{"size":82,"mtime":1643551701939,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"kpq8xl",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\web project\\my-react-app\\src\\index.js",[],["44","45"],"C:\\web project\\my-react-app\\src\\App.js",[],"C:\\web project\\my-react-app\\src\\reportWebVitals.js",[],"C:\\web project\\my-react-app\\src\\components\\tableData.js",["46","47","48","49","50","51","52"],"C:\\web project\\my-react-app\\src\\components\\graphData.js",["53","54","55","56","57","58","59","60","61"],"import * as React from 'react';\r\nimport axios from 'axios';\r\nimport \"./css/graphData.css\";\r\nimport Chart from \"react-apexcharts\";\r\nimport mapboxgl from 'mapbox-gl';\r\nimport ReactMapGL from 'react-map-gl';\r\n\r\nimport { useSelector } from \"react-redux\"\r\nimport { useDispatch } from \"react-redux\";\r\nimport { bindActionCreators } from 'redux';\r\nimport { actionCreators } from \"../store/index\";\r\n\r\nfunction GraphData() {\r\n    \r\n    const state = useSelector((state) => state.metorState);\r\n    const baseURL = \"https://data.nasa.gov/resource/y77d-th95.json\";\r\n    //const baseURL = state.baseUrl;\r\n    //var list = state.metorList;\r\n\r\n    mapboxgl.accessToken = \"pk.eyJ1IjoibXJpc3ZhbGlkIiwiYSI6ImNrZXY3bXFtcjB4MjMycXA3a3Znc3RkaHIifQ.Fa6Crua7ws6ssDYg56E12w\"//state.mapToken;\r\n\r\n    const dispatch = useDispatch();\r\n    const { setMetorListState, getMetorListState } = bindActionCreators(actionCreators, dispatch);\r\n\r\n    const [charOptions, setCharOptions] = React.useState({});\r\n    const [charSeries, setcharSeries] = React.useState([]);\r\n\r\n    const mapContainer = React.useRef(null);\r\n    const map = React.useRef(null);\r\n    const [lng, setLng] = React.useState(-65.23333);\r\n    const [lat, setLat] = React.useState(-31.6);\r\n    const [zoom, setZoom] = React.useState(5);\r\n\r\n\r\n \r\n    React.useEffect(async () => {\r\n        await axios.get(baseURL).then((response) => {\r\n            var metorPerYear = {};\r\n            var geoLocationData = [];\r\n            for(let metor of response.data) {\r\n                let fixYear = new Date(metor.year).toLocaleDateString().split('/')[2];\r\n                \r\n                if(fixYear === undefined) continue;\r\n                \r\n                if(fixYear in metorPerYear) metorPerYear[fixYear] = metorPerYear[fixYear] + 1;\r\n                else metorPerYear[fixYear] = 1;\r\n\r\n                geoLocationData.push({\r\n                    'type': 'Feature',\r\n                    'properties': {\r\n                    'description':\r\n                        '<strong>'+ metor.name +'</strong><p>type: '+ metor.nametype +'</p><p>mass: '+ metor.mass +'</p><p>year: '+ fixYear +'</p>'\r\n                    },\r\n                    'geometry': metor.geolocation\r\n                })\r\n            }\r\n\r\n            buildMap(geoLocationData);\r\n\r\n            setCharOptions(\r\n                {\r\n                    chart: {\r\n                        id: \"basic-bar\",\r\n                        type: 'bar',\r\n                    },\r\n\r\n                    dataLabels: {\r\n                        enabled: false  \r\n                    },\r\n                    \r\n                    xaxis: {\r\n                        categories: Object.keys(metorPerYear),\r\n                        tickPlacement: 'on',\r\n                    },\r\n                }\r\n                );\r\n                \r\n            setcharSeries([\r\n                    {\r\n                        name: \"amount\",\r\n                        data: Object.values(metorPerYear),\r\n                    }\r\n                ]);\r\n            });\r\n    }, []);\r\n\r\n    async function buildMap(geoLocationData){\r\n        if (map.current) return; // initialize map only once\r\n            map.current = new mapboxgl.Map({\r\n                container: mapContainer.current,\r\n                style: 'mapbox://styles/mapbox/streets-v11',\r\n                center: [lng, lat],\r\n                zoom: zoom\r\n            });\r\n\r\n            map.current.on('load', () => {\r\n                map.current.addSource('places', {\r\n                    'type': 'geojson',\r\n                    'data': {\r\n                    'type': 'FeatureCollection',\r\n                    'features': geoLocationData\r\n                    }\r\n                });\r\n\r\n                // Add a layer showing the places.\r\n                map.current.addLayer({\r\n                'id': 'places',\r\n                'type': 'circle',\r\n                'source': 'places',\r\n                'paint': {\r\n                    'circle-color': '#4264fb',\r\n                    'circle-radius': 6,\r\n                    'circle-stroke-width': 2,\r\n                    'circle-stroke-color': '#ffffff'\r\n                    }\r\n                });\r\n                 \r\n                // Create a popup, but don't add it to the map yet.\r\n                const popup = new mapboxgl.Popup({\r\n                    closeButton: false,\r\n                    closeOnClick: false\r\n                });\r\n                 \r\n                map.current.on('mouseenter', 'places', (e) => {\r\n                    // Change the cursor style as a UI indicator.\r\n                    map.current.getCanvas().style.cursor = 'pointer';\r\n                    \r\n                    // Copy coordinates array.\r\n                    const coordinates = e.features[0].geometry.coordinates.slice();\r\n                    const description = e.features[0].properties.description;\r\n                    \r\n                    // Ensure that if the map is zoomed out such that multiple\r\n                    // copies of the feature are visible, the popup appears\r\n                    // over the copy being pointed to.\r\n                    while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\r\n                        coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\r\n                    }\r\n                    \r\n                    // Populate the popup and set its coordinates\r\n                    // based on the feature found.\r\n                    popup.setLngLat(coordinates).setHTML(description).addTo(map.current);\r\n                });\r\n                 \r\n                map.current.on('mouseleave', 'places', () => {\r\n                    map.current.getCanvas().style.cursor = '';\r\n                    popup.remove();\r\n                    });\r\n            });\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Chart\r\n                className=\"chartStyle\"\r\n                options={charOptions}\r\n                series={charSeries}\r\n                type=\"bar\"\r\n                height=\"400px\"\r\n            />\r\n            \r\n            <div ref={mapContainer} className=\"map-container\" />\r\n\r\n            {/* <ReactMapGL \r\n                mapboxApiAccessToken=\"pk.eyJ1IjoibXJpc3ZhbGlkIiwiYSI6ImNrZXY3bXFtcjB4MjMycXA3a3Znc3RkaHIifQ.Fa6Crua7ws6ssDYg56E12w\"\r\n                {...viewport}\r\n                    onViewportChange={nextViewport => setViewport(nextViewport)\r\n                }\r\n            /> */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GraphData;\r\n","C:\\web project\\my-react-app\\src\\store\\store.js",[],"C:\\web project\\my-react-app\\src\\store\\reducers\\metorReducer.js",[],"C:\\web project\\my-react-app\\src\\store\\reducers\\index.js",[],"C:\\web project\\my-react-app\\src\\store\\actions\\metorAction.js",[],"C:\\web project\\my-react-app\\src\\store\\index.js",[],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":2,"column":8,"nodeType":"68","messageId":"69","endLine":2,"endColumn":14},{"ruleId":"66","severity":1,"message":"70","line":26,"column":32,"nodeType":"68","messageId":"69","endLine":26,"endColumn":49},{"ruleId":"66","severity":1,"message":"71","line":33,"column":26,"nodeType":"68","messageId":"69","endLine":33,"endColumn":41},{"ruleId":"72","severity":1,"message":"73","line":56,"column":8,"nodeType":"74","endLine":56,"endColumn":10,"suggestions":"75"},{"ruleId":"76","severity":1,"message":"77","line":65,"column":64,"nodeType":"78","messageId":"79","endLine":65,"endColumn":66},{"ruleId":"72","severity":1,"message":"80","line":70,"column":8,"nodeType":"74","endLine":70,"endColumn":24,"suggestions":"81"},{"ruleId":"66","severity":1,"message":"82","line":73,"column":14,"nodeType":"68","messageId":"69","endLine":73,"endColumn":24},{"ruleId":"66","severity":1,"message":"83","line":6,"column":8,"nodeType":"68","messageId":"69","endLine":6,"endColumn":18},{"ruleId":"66","severity":1,"message":"84","line":15,"column":11,"nodeType":"68","messageId":"69","endLine":15,"endColumn":16},{"ruleId":"66","severity":1,"message":"85","line":23,"column":13,"nodeType":"68","messageId":"69","endLine":23,"endColumn":30},{"ruleId":"66","severity":1,"message":"70","line":23,"column":32,"nodeType":"68","messageId":"69","endLine":23,"endColumn":49},{"ruleId":"66","severity":1,"message":"86","line":30,"column":17,"nodeType":"68","messageId":"69","endLine":30,"endColumn":23},{"ruleId":"66","severity":1,"message":"87","line":31,"column":17,"nodeType":"68","messageId":"69","endLine":31,"endColumn":23},{"ruleId":"66","severity":1,"message":"88","line":32,"column":18,"nodeType":"68","messageId":"69","endLine":32,"endColumn":25},{"ruleId":"72","severity":1,"message":"89","line":36,"column":21,"nodeType":"90","endLine":85,"endColumn":6},{"ruleId":"72","severity":1,"message":"91","line":85,"column":8,"nodeType":"74","endLine":85,"endColumn":10,"suggestions":"92"},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'getMetorListState' is assigned a value but never used.","'setTableHeaders' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'baseURL' and 'setMetorListState'. Either include them or remove the dependency array.","ArrayExpression",["95"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook React.useEffect has a missing dependency: 'metorsList'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setTempMetorsList' needs the current value of 'metorsList'.",["96"],"'searchInDb' is defined but never used.","'ReactMapGL' is defined but never used.","'state' is assigned a value but never used.","'setMetorListState' is assigned a value but never used.","'setLng' is assigned a value but never used.","'setLat' is assigned a value but never used.","'setZoom' is assigned a value but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook React.useEffect has a missing dependency: 'buildMap'. Either include it or remove the dependency array.",["97"],"no-global-assign","no-unsafe-negation",{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},{"desc":"102","fix":"103"},"Update the dependencies array to be: [baseURL, setMetorListState]",{"range":"104","text":"105"},"Update the dependencies array to be: [name, year, mass, metorsList]",{"range":"106","text":"107"},"Update the dependencies array to be: [buildMap]",{"range":"108","text":"109"},[2028,2030],"[baseURL, setMetorListState]",[2701,2717],"[name, year, mass, metorsList]",[3018,3020],"[buildMap]"]